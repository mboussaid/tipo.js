const tipo={types:{},useType(e,t){const o=(o,r)=>{let s=!0;if(t)if(tipo.types[t])switch(t){case tipo.types.string:"string"!=typeof o&&(s=!1);break;case tipo.types.number:"number"!=typeof o&&(s=!1);case tipo.types.object:"object"!=typeof o&&(s=!1);break;case tipo.types.array:Array.isArray(o)||(s=!1);break;case tipo.types.boolean:!0!==o&&!1!==o&&(s=!1);break;case tipo.types.float:Number(o)===o&&o%1!=0||(s=!1)}else e instanceof t||(s=!(!r||null!==e));return s};if(!o(e,!0))throw new Error("Invalid type: the type must be a "+(t.name?t.name:t));return new Proxy({value:e},{get:(e,t)=>e[t],set(e,r,s){if(!o(s,!1))throw new Error("Invalid type: the type must be a "+(t.name?t.name:t));e[r]=s}})}};["number","string","object","array","boolean","float"].forEach(e=>{tipo.types[e]=e}),"object"==typeof module&&module.exports&&(module.exports={useType:useType,types:types});
